/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.c
 #	source generated by 4D Plugin Wizard
 #	Project : KIOSK
 #	author : miyako
 #	2013/05/23
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#define KIOSK_ON	1
#define KIOSK_OFF	0

char _MODE = KIOSK_OFF;

#if VERSIONWIN
HHOOK	_HHOOK_TaskMgr	= NULL;
HWND	_HWND_MDI		= NULL;
#else
SystemUIMode	_SystemUIMode = 0;
SystemUIOptions	_SystemUIOptions = 0;
#endif

void PluginMain(int32_t selector, PA_PluginParameters params)
{
	try
	{
		int32_t pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;
		
		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{
		
	}
}

void CommandDispatcher (int32_t pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
		case kInitPlugin :		
			InitPlugin();
			break;
			
		case kDeinitPlugin :	
			DeinitPlugin();
			break;
			
			// --- KIOSK
			
		case 1 :
			KIOSK_SET_MODE(pResult, pParams);
			break;
			
		case 2 :
			KIOSK_Get_mode(pResult, pParams);
			break;
			
	}
}

void _refreshDesktop()
{
#if VERSIONWIN
	InvalidateRect(_HWND_MDI, NULL, TRUE); 
	UpdateWindow(GetDesktopWindow());
#endif		
}

void _hideMainWindowTitleBar()
{
#if VERSIONWIN
	if(_HWND_MDI)
	{
		SetWindowLong(_HWND_MDI, GWL_STYLE, GetWindowLong (_HWND_MDI, GWL_STYLE) | WS_POPUP);
		SetWindowLong(_HWND_MDI, GWL_STYLE, GetWindowLong (_HWND_MDI, GWL_STYLE) &~ WS_CAPTION);
		SetWindowLong(_HWND_MDI, GWL_STYLE, GetWindowLong (_HWND_MDI, GWL_STYLE) &~ WS_SYSMENU);
		SetWindowPos (_HWND_MDI, NULL, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | SWP_FRAMECHANGED);	
		_refreshDesktop();
	}
#endif	
}

void _showMainWindowTitleBar()
{
#if VERSIONWIN
	if(_HWND_MDI)
	{
		SetWindowLong(_HWND_MDI, GWL_STYLE, GetWindowLong (_HWND_MDI, GWL_STYLE) &~ WS_POPUP);
		SetWindowLong(_HWND_MDI, GWL_STYLE, GetWindowLong (_HWND_MDI, GWL_STYLE) | WS_CAPTION);
		SetWindowLong(_HWND_MDI, GWL_STYLE, GetWindowLong (_HWND_MDI, GWL_STYLE) | WS_SYSMENU);
		SetWindowPos (_HWND_MDI, NULL, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | SWP_FRAMECHANGED);	
		_refreshDesktop();
	}
#endif	
}

void _hideTaskTray()
{
#if VERSIONWIN	
	HWND HWND_TrayWnd = FindWindow(L"Shell_TrayWnd", NULL);
	if(HWND_TrayWnd)
	{
		ShowWindow(HWND_TrayWnd, SW_HIDE);	
		_refreshDesktop();	
	}
#endif	
}

void _showTaskTray()
{
#if VERSIONWIN	
	HWND HWND_TrayWnd = FindWindow(L"Shell_TrayWnd", NULL);
	if(HWND_TrayWnd)
	{
		ShowWindow(HWND_TrayWnd, SW_SHOW);	
		_refreshDesktop();	
	}
#endif
}
	
#if VERSIONWIN
LRESULT CALLBACK _CALLBACK_WH_KEYBOARD_LL(int code, WPARAM wParam, LPARAM lParam)
{
	
	KBDLLHOOKSTRUCT *pkh = (KBDLLHOOKSTRUCT *) lParam;
	BOOL bCtrlKeyDown = FALSE;
	BOOL bAltKeyDown = FALSE;
	BOOL bShiftKeyDown = FALSE;	
	
	if(code == HC_ACTION) 
	{
		bCtrlKeyDown = GetAsyncKeyState(VK_CONTROL)>>((sizeof(SHORT) * 8) - 1);
		bShiftKeyDown = GetAsyncKeyState(VK_SHIFT)>>((sizeof(SHORT) * 8) - 1);		
		bAltKeyDown = pkh->flags & LLKHF_ALTDOWN;
		
		if((pkh->vkCode == VK_ESCAPE && bCtrlKeyDown) ||				// Ctrl+Esc
		   (pkh->vkCode == VK_TAB && bAltKeyDown) ||						// Alt+Tab, Alt+Shift+Tab	  
		   (pkh->vkCode == VK_ESCAPE && bAltKeyDown) ||				// Alt+Esc, Alt+Shift+Esc
		   (pkh->vkCode == VK_ESCAPE && bCtrlKeyDown && bShiftKeyDown)||	// Ctrl+Shift+Esc
		   (pkh->vkCode == VK_DELETE && bCtrlKeyDown && bAltKeyDown)||		// Ctrl+Alt+Delete	(can't catch hotkeys this way...)	   
		   (pkh->vkCode == VK_F4 && bAltKeyDown)||							// Alt+F4		
		   (pkh->vkCode == VK_LWIN || pkh->vkCode==VK_RWIN))	// Windows
		{ 
			return 1;
		}
	}
	return CallNextHookEx(_HHOOK_TaskMgr, code, wParam, lParam);
}
#endif

void _disableTaskSwitching()
{
#if VERSIONWIN
	HKEY hk;
	
	DWORD val = 1;
	
	if(!_HHOOK_TaskMgr)
		_HHOOK_TaskMgr = SetWindowsHookEx(WH_KEYBOARD_LL, 
										  (HOOKPROC)_CALLBACK_WH_KEYBOARD_LL, 
										  (HINSTANCE)GetModuleHandle(0), 0);
	
	if(_HHOOK_TaskMgr)
	{
		if(RegOpenKey(HKCU, KEY_DisableTaskMgr, &hk) != ERROR_SUCCESS)
			RegCreateKey(HKCU, KEY_DisableTaskMgr, &hk);
		
		RegSetValueEx(hk, VAL_DisableTaskMgr, 0, REG_DWORD, (BYTE*)&val, sizeof(val));	
	}
	
#else
	SetSystemUIMode(kUIModeAllHidden,
					kUIOptionDisableAppleMenu|
					kUIOptionDisableProcessSwitch|
					kUIOptionDisableForceQuit|
					kUIOptionDisableSessionTerminate|
					kUIOptionDisableHide);
#endif
}

void _enableTaskSwitching()
{
#if VERSIONWIN
	HKEY hk;
	
	if(_HHOOK_TaskMgr)
	{
		UnhookWindowsHookEx(_HHOOK_TaskMgr);
		_HHOOK_TaskMgr = NULL;
	}
	
	if(!_HHOOK_TaskMgr)
	{
		if(RegOpenKey(HKCU, KEY_DisableTaskMgr, &hk) != ERROR_SUCCESS)
			RegCreateKey(HKCU, KEY_DisableTaskMgr, &hk);
		
		RegDeleteValue(hk, VAL_DisableTaskMgr);		
	}
#else
	
	SetSystemUIMode (_SystemUIMode, _SystemUIOptions);
	
#endif
}

void InitPlugin()
{
#if VERSIONWIN	
	PA_Unistring applicationFile = PA_GetApplicationFullPath();
	int len = (int)PA_GetUnicharsLength(applicationFile.fString);
	int i;
	
	for(i = len; i > 0;--i)
	{
		applicationFile.fString[i] = 0;
		_HWND_MDI = FindWindow((LPCTSTR)applicationFile.fString, (LPCTSTR)NULL); 
		if(_HWND_MDI)
			break;
	}
	
	PA_DisposeUnistring(&applicationFile);
	
#else
	
	GetSystemUIMode(&_SystemUIMode, &_SystemUIOptions);
	
#endif
}

void DeinitPlugin()
{
	_showTaskTray();
	_enableTaskSwitching();
	_showMainWindowTitleBar();
}

// ------------------------------------- KIOSK ------------------------------------


void KIOSK_SET_MODE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	if((Param1.getIntValue() == KIOSK_ON) && (_MODE == KIOSK_OFF))
	{
		_hideTaskTray();
		_disableTaskSwitching();
		_hideMainWindowTitleBar();
		_MODE = KIOSK_ON;
	
	}else if((Param1.getIntValue() == KIOSK_OFF) && (_MODE == KIOSK_ON))
	{	
		_showTaskTray();
		_enableTaskSwitching();
		_showMainWindowTitleBar();
		_MODE = KIOSK_OFF;
	}

}

void KIOSK_Get_mode(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT returnValue;

	returnValue.setIntValue(_MODE);

	returnValue.setReturn(pResult);
}
